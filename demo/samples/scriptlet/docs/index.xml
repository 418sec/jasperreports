<?xml version="1.0" encoding="UTF-8"?>

<sample>

  <name>scriptlet</name>
  <title>Scriptlet Sample</title>
  <description>Shows how the scriptlets could be used to manipulate data during report filling.</description>

  <mainFeature ref="scriptlet"/>
  
  <!-- scriptlet -->
  
  <feature name="scriptlet" title="Scriptlets">
    <description>
	How to perform custom calculation and tailor the report filling process using report scriptlets implementations.
    </description>
    <since>0.2.5</since>
    <content>
    There are situations when a calculation is required during the report filling stage that is not included in JasperReports provided
    calculations. Examples of this may be complex String manipulations, building of Maps or Lists of objects in memory or manipulations 
    of dates using 3rd party Java APIs.
    <br/>
    Luckily JasperReports provides us with a simple and powerful means of doing this with Scriptlets.
    <br/>
    <em>What is a Scriptlet?</em>
    <br/>
    A Script is a Java Class that extends one of the two following classes:
    <br/>
    JRDefaultScriptlet http://jasperreports.sourceforge.net/api/net/sf/jasperreports/engine/JRDefaultScriptlet.html
    <br/>
    JRAbstractScriptlet http://jasperreports.sourceforge.net/api/net/sf/jasperreports/engine/JRAbstractScriptlet.html.
    <br/>
    The sample extends the JRDefaultScriptlet. The difference between the two is with JRAbstractScriptlet a developer must implement
    all the abstract methods. By extending JRDefaultScriptlet a developer is only required to implement that methods he/she needs for 
    their project.
    <br/>
    Once the Scriptlet has been referenced in the report (we will cover this shortly), during the Filling stage of the Report Life Cycle (the report template is compiled, filled with data and finally exported to a useful format),
     the JasperReports API will ensure to call the appropriate methods within the Scriptlet. It is within these methods you will place your own logic to manipulate data is the report.<br/>
    Before we discuss more what these methods do lets discuss how to run this sample.
    <br/>
    <em>Running the Report in iReport</em>
    <br/>
    There is a readme.txt that clearly explains how to run the report from a command prompt/terminal using ant. This document will not duplicate this information.<br/>
    We will instead review setting this example up in iReport 3.7.0
    <br/>
    Creating the DataSource in iReport<br/>
    In a command prompt browse to the demo/hsqldb folder of the JasperReports source and run the command 'ant runServer'. Leave window/terminal running and start iReport.
    <br/>
    <img src="runServer.png"/>
    <br/>
    In iReport create a new JDBC Data Source with the following settings:
    <br/>
    <img src="jr-ireport-ds.png"/>
    <br/>
    Open ScriptletReport.jrxml in iReport. When the report loads you will get an error similar to the following:
    <pre> 
    java.lang.ClassNotFoundException: Will not load classes from default package (Scriptlet)
    </pre>
    <br/>
    To fix this error we will need to add Scriptlet.java to iReport's classpath. Before doing this run the 'ant javac' task in the demo/samples/Scriptlet folder of
     the JasperReports source to ensure Scriptlet.java is compiled. This should generate a Scriptlet.class file (refer to the readme.txt file in the Scriplet sample folder for instructions on how
     to do this). Now in iReport click the menu Tools > Options > Classpath (tab). Click the 'Add Folder Button' and add the folder demo\samples\scriptlet\build\classes 
     of the JasperReport source directory.
    <br/>
     <img src="ireport-classpath.png"/>
     <br/>
    You can now click the 'Preview Button' to run the report (make sure the data source create above is selected). You will be prompted for a Title, any String value will be fine. The Filled report should display in iReport
     showing the title you entered and data returned from the hsqldb database by running the report's query.
    <br/>
    You know have a working version of the report you can review and tweak to learn more about Scriptlets.
    <br/> 
    <em>What does a Scriptlet do?</em>
    <br/>
    A Scriptlet allows the developer to obtain the values of Fields, Variables and Parameters from the report during specific events in the Filling
    stage of the Report Life Cycle. It also allows you to set data in the report as it executes its Fill Cycle. We will discuss this more in the sections 
    below.
    <br/>
    If you look at Scriptlet.java within this sample you will see all possible methods have been implemented. Most contain output statements. By running the sample
    from the command line or in iReport you will see the outputs of these statements along with the generated report itself. The method afterGroupInit contains all the 
    most interesting logic and will be the main focus of our discussion.<br/>
    <br/>
    <i>Working with Report Data</i>
    <br/>
    A developer can read the values from Fields (which map to the data source), Values and Parameters from the report into variables within the Scriptlet.
    <br/>
    Examples of this can be seen in afterGroupInit method. In this method we obtain the value of a variable and a field from the report as it is filling:
   	 <pre>
    <![CDATA[
    	String allCities = (String)this.getVariableValue("AllCities");
		String city = (String)this.getFieldValue("City");
    ]]>
	</pre>
	In the first line of code we get the value of the AllCities variable, the second we get the value of the Field "City". It is important to note
	we get these values at the time of the event this method in the Scriptlet corresponds with. In this case, after a JasperReports group has been initalized, the logic
	in this report will be executed (provided the check on the group name performed at the start of the method is successful).
	<br/>
	In the same method we see an example of how to write to a variable in the report:
	 <pre>
    <![CDATA[
		this.setVariableValue("AllCities", sbuffer.toString());
	]]>
	</pre>
	<br />
	The important part when ensuring a variable in your report template is filled by a Scriptlet (or subreport) is to ensure the Variable has a calculation type of 'System' in 
	the report design:<br/>
	<pre>
	<![CDATA[
		<variable name="AllCities" class="java.lang.String" calculation="System"/>
	]]>
	</pre>
	Also notice that there is *no* Variable Expression. Make sure you remember these two points when creating Variables in your own report with values supplied by Scriptlets.
	<br/>
	<i>Creating Helper Methods</i>
	At the end of the class a extra method called hello has been defined:
	<pre>
	<![CDATA[
	public String hello() throws JRScriptletException
	{
		return "Hello! I'm the report's scriptlet object.";
	}
	]]>
	</pre>
	This is an example of a method that can added to the Scriptlet that actually returns a value, rather than setting a Variable. The ScripletReport.jrxml has a method
	in the Summary band that illustrates how to use such a method. The expression is:
	<pre>
		<![CDATA[
		$P{REPORT_SCRIPTLET}.hello()
		]]>
	</pre>
	The Parameter referenced is a built-in Parameter managed by the JasperReports API and contains a reference to the Scriptlet. As can be seen the hello() method is called. The
	 Type of the TextField containing this expression is String. This corresponds to the type returned by the method in the Scriptlet.
	<br/> 
    <em>How do you use a Scriptlet in a report?</em>
    A Scriptlet can be associated with a Report by adding a scriptletClass property to the JasperReports tag:
    <pre>
    <![CDATA[
    <jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="ListReport" columnCount="2" pageWidth="595" pageHeight="842" columnWidth="250" columnSpacing="15" leftMargin="40" rightMargin="40" topMargin="50" bottomMargin="50" scriptletClass="com.myproject.reporting.MyScriptlet">
    ]]>
	</pre>
    Note how the fully qualified reference is used for the Scriptlet class. In iReport this property can be set by selecting the root element of the report in the Report Inspector panel and
     then in the Property panel setting the fully qualified reference of the Scriptlet in the Scriptlet property.
    <br/>
    <img src="setting-scriptlet-ireport.png"/>
    This concludes the summary of the Scriptlet example.
    <br/>
    <em>Further Resources</em>
    JasperReports Ultimate Guide (available from the JasperSoft eShop)<br/>
    iReport Ultimate Guide (available from the JasperSoft eShop)<br/>
    </content>
  </feature>

</sample>
