<div id="element${configuration.element.hashCode()}" style="width: ${configuration.element.width}px; height: ${configuration.element.height}px;" >

<svg xmlns="http://www.w3.org/2000/svg" 
 xmlns:xlink="http://www.w3.org/1999/xlink" 
 width='${configuration.element.width}px' height='${configuration.element.height}px'>

 <circle cx='120' cy='150' r='60' style='fill: gold;'>
    <animate attributeName='r' from='2' to='80' begin='0' dur='3' repeatCount='indefinite' /></circle>
   
 <text x='60' y='250' fill='blue'>Hello, World!</text>

</svg>


</div>

## Import of the javascritp files in a map {key:value}, where key is the require.js name, and value the path or url of the file
## If no require.js is defined, use the url itself as key.
##${configuration.scripts.require( { "path": "com/jaspersoft/jasperreports/components/bridge/templates/d3.v3.min.js", "name": "", "export": "d3", "key": "d3"},
##                                 { "path": "com/jaspersoft/jasperreports/components/bridge/templates/d3.layout.min.js", "name": "", "export": "", "key": "d3-layout"} )}





<script class='jasperreports' type='text/javascript'>
            
        ## Empty requireJS function. Used when no javascript is involved.
        function requireJSComponentelement${configuration.element.hashCode()}()
        {
                 return [];
        }

        ## The main function (renderComponentelementXXX) is invoked by requirejs and the component javascript module
        ## automatically. In case the environment is not using requirejs, which is what happens with a standard
        ## export outside jasperreports server or an interactive environment, we need to kick the rendering
        ## process manually by invoking renderComponentelementXXX  
        #if (!${configuration.isInteractiveViewer})
            renderComponentelement${configuration.element.hashCode()}(${configuration.instanceData});
        #end

</script>
