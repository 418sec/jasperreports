<div id="element${configuration.element.hashCode()}" style="width: ${configuration.element.width}px; height: ${configuration.element.height}px;" ></div>

${configuration.scripts.require( { "path": "scripts/d3/d3.v3.min.js", "name": "", "export": "d3", "key": "d3"},
                                 { "path": "scripts/d3/d3.layout.min.js", "name": "", "export": "", "key": "d3-layout"} )}

<style>

## rgb(31, 119, 180);

circle {
  fill: rgb(31, 119, 180);
  fill-opacity: .25;
  stroke: rgb(31, 119, 180); 
  stroke-width: 2px;
}

.leaf circle {
  fill: #ff7f0e;
  fill-opacity: 1;
}

text {
  font: 10px sans-serif;
}

</style>

<script class='jasperreports' type='text/javascript'>
        
        function renderComponentelement${configuration.element.hashCode()}(instanceData)
        {

                var data = { name: "data", children: [] };

                // Build the tree...
                var series0 = instanceData.series[0];
                
                var currentCategory = "";
                for (var index = 0; index < series0.length; ++index) {
                    
                    var record = series0[index];
                    
                    if ( currentCategory != record.category )
                    {
                        currentCategory = record.category;
                        
                        var categoryObject = { name: currentCategory, children: [] };
                        
                        // populate sub categories
                        for (var index2 = 0; index2 < series0.length; ++index2) {
                            var subrecord = series0[index2];
                            if (subrecord.category == currentCategory)
                            {
                                categoryObject.children.push({ name: subrecord.subcategory, size: subrecord.value });
                            }
                        }
                        data.children.push( categoryObject );
                    }
                 } 

                 var w = instanceData.width,
                     h = instanceData.height,
                     format = d3.format(",d");

                var pack = d3.layout.pack()
                    .size([w - 4, h - 4])
                    .value(function(d) { return d.size; });

                var vis = d3.select("#element" + instanceData.key).append("svg:svg")
                    .attr("width", w)
                    .attr("height", h)
                    .attr("class", "pack")
                  .append("svg:g")
                    .attr("transform", "translate(2, 2)");

                  var node = vis.datum(data).selectAll("g.node")
                      .data(pack.nodes)
                    .enter().append("svg:g")
                      .attr("class", function(d) { return d.children ? "node" : "leaf node"; })
                      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

                  node.append("svg:title")
                      .text(function(d) { return d.name + (d.children ? "" : ": " + format(d.size)); });

                  node.append("svg:circle")
                      .attr("r", function(d) { return d.r; });

                  node.filter(function(d) { return !d.children; }).append("svg:text")
                      .attr("text-anchor", "middle")
                      .attr("dy", ".3em")
                      .text(function(d) { return d.name.substring(0, d.r / 3); });
                  
        }


        ## The main function (renderComponentelementXXX) is invoked by requirejs and the component javascript module
        ## automatically. In case the environment is not using requirejs, which is what happens with a standard
        ## export outside jasperreports server or an interactive environment, we need to kick the rendering
        ## process manually by invoking renderComponentelementXXX  
        #if (!${configuration.isInteractiveViewer})
            renderComponentelement${configuration.element.hashCode()}(${configuration.instanceData});
        #end


       
</script>