<div 
#if(${xhtml})
	style='position: absolute; left: ${elementX}; top: ${elementY}; width: ${elementWidth}px; height: ${elementHeight}px;
#else
	style='width: ${elementWidth}px; height: ${elementHeight}px;
#end
	#if(${backgroundColor}) 
		background-color: \#${backgroundColor};
	#end
'>
	<div id='${mapCanvasId}' style='width: 100%; height: 100%; overflow: auto'></div>
</div>

#if (${gotReportContext})
	<script class='jasperreports' type='text/javascript'>
		jasperreports.global.appendScriptElementToDOM('_mapScript', '${resourceMapJs}', 'jasperreports.map.initGoogleMaps', ['${language}']);
		var markers = ${markerList};
		jasperreports.events.subscribeToEvent({name: 'jasperreports.map.init', callback: 'jasperreports.map.showMap', args: ['${mapCanvasId}', ${latitude}, ${longitude}, ${zoom}, '${mapType}', markers]});
	</script>
#else
	#if (${exporterFirstAttempt})
		#if(${language})
			<script class='jasperreports' src='http://maps.google.com/maps/api/js?sensor=false&language=${language}'></script>
		#else
			<script class='jasperreports' src='http://maps.google.com/maps/api/js?sensor=false'></script>
		#end
	#end
	<script class='jasperreports' type='text/javascript'>
		(function () {
			var map = new google.maps.Map(document.getElementById('${mapCanvasId}'), {
						zoom: ${zoom},
						center: new google.maps.LatLng(${latitude}, ${longitude}), 
						mapTypeId: google.maps.MapTypeId.${mapType}
					});
			var markers = ${markerList};
			if(markers){
				var j;
				for (var i = 0; i < markers.length; i++) {
				    var markerProps = markers[i];
				    var markerLatLng = new google.maps.LatLng(markerProps['latitude'], markerProps['longitude']);
				    var markerOptions = {
					        position: markerLatLng,
					        map: map
					    };
				    if(markerProps['icon.url'] && markerProps['icon.url'].length > 0) {
				    	configureImage('icon', markerProps, markerOptions);
				    }
				    if(markerProps['shadow.url'] && markerProps['shadow.url'].length > 0) {
				    	configureImage('shadow', markerProps, markerOptions);
				    }
				    for (j in markerProps) {
						if (
							j.indexOf("icon.") < 0 
							&& j.indexOf("shadow.") < 0
							&& markerProps.hasOwnProperty(j) 
							&& !markerOptions.hasOwnProperty(j)
							) {
								markerOptions[j] = markerProps[j];
						}
					}
				    var marker = new google.maps.Marker(markerOptions);
				    if(markerOptions['url']) {
						google.maps.event.addListener(marker, 'click', function() {
							switch(markerOptions['target']) {
								case '_self': 
									window.self.location.href = markerOptions['url'];
									break;
								case '_parent': 
									window.parent.location.href = markerOptions['url'];
									break;
								case '_top': 
									window.top.location.href = markerOptions['url'];
									break;
								default:
									if(frames[markerOptions['target']]) {
										frames[markerOptions['target']].location.href = markerOptions['url'];
									} else {
										window.location.href = markerOptions['url'];
									}
							}
						});	
					}				        
				}
			}
		}());	
		
		function configureImage(parentKey, parentProps, parentOptions) {
			var width, height, originX, originY, anchorX, anchorY;
			var imageSize;
			var imageOrigin, imageAnchor;
			var imageUrl = parentProps[parentKey + '.url'];
			
			if(parentProps[parentKey + '.width']) {
				width = new Number(parentProps[parentKey + '.width']);
			}
			if(parentProps[parentKey + '.height']) {
				height = new Number(parentProps[parentKey + '.height']);
				if(width) {
					imageSize = new google.maps.Size(width,height);
				}
			}
			if(parentProps[parentKey + '.origin.x']) {
				originX = new Number(parentProps[parentKey + '.origin.x']);
				originY = 0;
			}
			if(parentProps[parentKey + '.origin.y']) {
				originY = new Number(parentProps[parentKey + '.origin.y']);
				if(!originX) {
					originX = 0;
				}
			}
			if(parentProps[parentKey + '.anchor.x']) {
				anchorX = new Number(parentProps[parentKey + '.anchor.x']);
				anchorY = 0;
			}
			if(parentProps[parentKey + '.anchor.y']) {
				anchorY = new Number(parentProps[parentKey + '.anchor.y']);
				if(!anchorX) {
					anchorX = 0;
				}
			}
			if(originX || originY) {
				imageOrigin = new google.maps.Point(originX,originY);
			}
			if(anchorX || anchorY) {
				imageAnchor = new google.maps.Point(anchorX,anchorY);
			}
			
			parentOptions[parentKey] = {
				url: imageUrl,
				size: imageSize,
				origin: imageOrigin,
				anchor: imageAnchor
			};
		}			
	</script>
#end