<div 
#if(${xhtml})
	style='position: absolute; left: ${elementX}; top: ${elementY}; width: ${elementWidth}px; height: ${elementHeight}px;
#else
	style='width: ${elementWidth}px; height: ${elementHeight}px;
#end
	#if(${backgroundColor}) 
		background-color: \#${backgroundColor};
	#end
'>
	<div id='${mapCanvasId}' style='width: 100%; height: 100%; overflow: auto'></div>
</div>

#if (${gotReportContext})
	<script class='jasperreports' type='text/javascript'>
		jasperreports.global.appendScriptElementToDOM('_mapScript', '${resourceMapJs}', 'jasperreports.map.initGoogleMaps', ['${language}']);
		var markers = ${markerList};
		jasperreports.events.subscribeToEvent({name: 'jasperreports.map.init', callback: 'jasperreports.map.showMap', args: ['${mapCanvasId}', ${latitude}, ${longitude}, ${zoom}, '${mapType}', markers]});
	</script>
#else
	#if (${exporterFirstAttempt})
		#if(${language})
			<script class='jasperreports' src='http://maps.google.com/maps/api/js?sensor=false&language=${language}'></script>
		#else
			<script class='jasperreports' src='http://maps.google.com/maps/api/js?sensor=false'></script>
		#end
		<script class='jasperreports' type='text/javascript'>
			if (typeof jasperreports === 'undefined') jasperreports = {};
			if (typeof jasperreports.map === 'undefined') {
				jasperreports.map = {
					configureImage: function (parentKey, parentProps, parentOptions) {
						var width, height, originX, originY, anchorX, anchorY, pp = parentProps, pk = parentKey;
						
						width = pp[pk + '.width'] ? parseInt(pp[pk + '.width']) : null;
						height = pp[pk + '.height'] ? parseInt(pp[pk + '.height']) : null;
						
						originX = pp[pk + '.origin.x'] ? parseInt(pp[pk + '.origin.x']) : 0;
						originY = pp[pk + '.origin.y'] ? parseInt(pp[pk + '.origin.y']) : 0;
			
						anchorX = pp[pk + '.anchor.x'] ? parseInt(pp[pk + '.anchor.x']) : 0;
						anchorY = pp[pk + '.anchor.y'] ? parseInt(pp[pk + '.anchor.y']) : 0;
						
						parentOptions[pk] = {
							url: pp[pk + '.url'],
							size: width && height ? new google.maps.Size(width, height) : null,
							origin: new google.maps.Point(originX,originY),
							anchor: new google.maps.Point(anchorX,anchorY)
						};
					},
					placeMarkers: function (markers, map) {
						if(markers){
							var j;
							for (var i = 0; i < markers.length; i++) {
							    var markerProps = markers[i];
							    var markerLatLng = new google.maps.LatLng(markerProps['latitude'], markerProps['longitude']);
							    var markerOptions = {
								        position: markerLatLng,
								        map: map
								    };
							    if(markerProps['icon.url'] && markerProps['icon.url'].length > 0) {
							    	this.configureImage('icon', markerProps, markerOptions);
							    }
							    if(markerProps['shadow.url'] && markerProps['shadow.url'].length > 0) {
							    	this.configureImage('shadow', markerProps, markerOptions);
							    }
							    for (j in markerProps) {
									if (j.indexOf("icon.") < 0 && j.indexOf("shadow.") < 0 && markerProps.hasOwnProperty(j) && !markerOptions.hasOwnProperty(j)) {
										markerOptions[j] = markerProps[j];
									}
								}
							    var marker = new google.maps.Marker(markerOptions);
							    if(markerOptions['url']) {
									google.maps.event.addListener(marker, 'click', function() {
										window.open(markerOptions['url'], markerOptions['target']);
									});	
								}				        
							}
						}
					}
				}
			}					
		</script>
	#end
	<script class='jasperreports' type='text/javascript'>
		(function () {
			var map = new google.maps.Map(document.getElementById('${mapCanvasId}'), {
						zoom: ${zoom},
						center: new google.maps.LatLng(${latitude}, ${longitude}), 
						mapTypeId: google.maps.MapTypeId.${mapType}
					});
			var markers = ${markerList};
			jasperreports.map.placeMarkers(markers, map);
		}());	
	</script>
#end