<!--
    TODO:
        1. refactor setDynamicProperties which sets up JR global font properties
        2. refactor jive.interactive.column.init({allColumnNames}, '{tableUUID}')
-->

#if (!${templateAlreadyLoaded})
<script class='jasperreports'>
	requirejs.config({
		paths: {
   			jiveinteractivecolumn: '${jiveColumnScript}'
		}
	});
    DFD.resolve();
</script>
#end

<script class='jasperreports'>
	require(['jive.column'], function(JiveColumn) {
        Report.register(new JiveColumn({
                id: '${columnUuid}',
                tableId: '${tableUUID}',
                type: 'column',
                selector: '.jrcolHeader',
                proxySelector: '.jrcel',
                columnIndex: ${columnIndex},
                columnLabel: "$JRStringUtil.htmlEncode(${columnLabel})",
                filterData: '{"actionName":"filter"}',
                clearData: '{"actionName":"filter","filterData":{"clearFilter":true}}',
            #if (!${canSort})
                canSort: false,
            #else
                canSort: true,
                headerToolbar: {
                    sortAscBtn: {sortData: {"actionName":"sort","sortData":${sortAscData}}},
                    sortDescBtn: {sortData: {"actionName":"sort","sortData":${sortDescData}}}
                },
            #end
            #if (!${canFilter})
                canFilter: false,
            #else
                canFilter: true,
                filtering: {
                    filterColumnNameLabel: "$JRStringUtil.htmlEncode(${filterColumnNameLabel})",
                    filterOperatorTypeValueSelector: [
                        #foreach( $entry in ${filterTypeValuesMap.entrySet()} )
                            {key: "$entry.key", val: "$entry.value"},
                        #end
                        null
                    ],
                    filterData: ${filterData}
                },
                #if (${hasPattern})
                    formatPatternLabel: '${formatPatternLabel}',
                    formatPatternSelector: [
                        #foreach( $entry in ${valuesFormatPatternMap.entrySet()} )
                            {key: "$entry.key", val: "$entry.value"},
                        #end
                        null
                    ],
                #end
            #end
            #if (!${canFormatConditionally})
                canFormatConditionally: false,
            #else
                canFormatConditionally: true,
                conditionalFormatting: ${conditionalFormattingData},
            #end
                headingsTabContent: ${colHeaderData},
                valuesTabContent: ${colValueData}
        }), DFD);
	});
</script>